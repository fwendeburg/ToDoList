(()=>{"use strict";var t,e={882:(t,e,s)=>{function a(t,e){if(e.length<t)throw new TypeError(t+" argument"+(t>1?"s":"")+" required, but only "+e.length+" present")}s.d(e,{Z:()=>a})},946:(t,e,s)=>{function a(t){if(null===t||!0===t||!1===t)return NaN;var e=Number(t);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}s.d(e,{Z:()=>a})},349:(t,e,s)=>{s.d(e,{Z:()=>r});var a=s(946),n=s(13),i=s(882);function r(t,e){(0,i.Z)(2,arguments);var s=(0,n.Z)(t),r=(0,a.Z)(e);return isNaN(r)?new Date(NaN):r?(s.setDate(s.getDate()+r),s):s}},474:(t,e,s)=>{s.d(e,{Z:()=>i});var a=s(13),n=s(882);function i(t,e){(0,n.Z)(2,arguments);var s=(0,a.Z)(t),i=(0,a.Z)(e),r=s.getTime()-i.getTime();return r<0?-1:r>0?1:r}},905:(t,e,s)=>{s.d(e,{Z:()=>r});var a=s(119),n=s(882);function i(t,e){(0,n.Z)(2,arguments);var s=(0,a.Z)(t),i=(0,a.Z)(e);return s.getTime()===i.getTime()}function r(t){return(0,n.Z)(1,arguments),i(t,Date.now())}},855:(t,e,s)=>{s.d(e,{Z:()=>c});var a=s(946),n=s(882),i=36e5,r={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},o=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,d=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,l=/^([+-])(\d{2})(?::?(\d{2}))?$/;function c(t,e){(0,n.Z)(1,arguments);var s=e||{},i=null==s.additionalDigits?2:(0,a.Z)(s.additionalDigits);if(2!==i&&1!==i&&0!==i)throw new RangeError("additionalDigits must be 0, 1 or 2");if("string"!=typeof t&&"[object String]"!==Object.prototype.toString.call(t))return new Date(NaN);var r,o=u(t);if(o.date){var d=p(o.date,i);r=h(d.restDateString,d.year)}if(isNaN(r)||!r)return new Date(NaN);var l,c=r.getTime(),m=0;if(o.time&&(m=v(o.time),isNaN(m)||null===m))return new Date(NaN);if(!o.timezone){var k=new Date(c+m),y=new Date(0);return y.setFullYear(k.getUTCFullYear(),k.getUTCMonth(),k.getUTCDate()),y.setHours(k.getUTCHours(),k.getUTCMinutes(),k.getUTCSeconds(),k.getUTCMilliseconds()),y}return l=g(o.timezone),isNaN(l)?new Date(NaN):new Date(c+m+l)}function u(t){var e,s={},a=t.split(r.dateTimeDelimiter);if(a.length>2)return s;if(/:/.test(a[0])?(s.date=null,e=a[0]):(s.date=a[0],e=a[1],r.timeZoneDelimiter.test(s.date)&&(s.date=t.split(r.timeZoneDelimiter)[0],e=t.substr(s.date.length,t.length))),e){var n=r.timezone.exec(e);n?(s.time=e.replace(n[1],""),s.timezone=n[1]):s.time=e}return s}function p(t,e){var s=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+e)+"})|(\\d{2}|[+-]\\d{"+(2+e)+"})$)"),a=t.match(s);if(!a)return{year:null};var n=a[1]&&parseInt(a[1]),i=a[2]&&parseInt(a[2]);return{year:null==i?n:100*i,restDateString:t.slice((a[1]||a[2]).length)}}function h(t,e){if(null===e)return null;var s=t.match(o);if(!s)return null;var a=!!s[4],n=m(s[1]),i=m(s[2])-1,r=m(s[3]),d=m(s[4]),l=m(s[5])-1;if(a)return function(t,e,s){return e>=1&&e<=53&&s>=0&&s<=6}(0,d,l)?function(t,e,s){var a=new Date(0);a.setUTCFullYear(t,0,4);var n=7*(e-1)+s+1-(a.getUTCDay()||7);return a.setUTCDate(a.getUTCDate()+n),a}(e,d,l):new Date(NaN);var c=new Date(0);return function(t,e,s){return e>=0&&e<=11&&s>=1&&s<=(y[e]||(b(t)?29:28))}(e,i,r)&&function(t,e){return e>=1&&e<=(b(t)?366:365)}(e,n)?(c.setUTCFullYear(e,i,Math.max(n,r)),c):new Date(NaN)}function m(t){return t?parseInt(t):1}function v(t){var e=t.match(d);if(!e)return null;var s=k(e[1]),a=k(e[2]),n=k(e[3]);return function(t,e,s){return 24===t?0===e&&0===s:s>=0&&s<60&&e>=0&&e<60&&t>=0&&t<25}(s,a,n)?s*i+6e4*a+1e3*n:NaN}function k(t){return t&&parseFloat(t.replace(",","."))||0}function g(t){if("Z"===t)return 0;var e=t.match(l);if(!e)return 0;var s="+"===e[1]?-1:1,a=parseInt(e[2]),n=e[3]&&parseInt(e[3])||0;return function(t,e){return e>=0&&e<=59}(0,n)?s*(a*i+6e4*n):NaN}var y=[31,null,31,30,31,30,31,31,30,31,30,31];function b(t){return t%400==0||t%4==0&&t%100}},119:(t,e,s)=>{s.d(e,{Z:()=>i});var a=s(13),n=s(882);function i(t){(0,n.Z)(1,arguments);var e=(0,a.Z)(t);return e.setHours(0,0,0,0),e}},366:(t,e,s)=>{s.d(e,{Z:()=>n});var a=s(119);function n(){return(0,a.Z)(Date.now())}},13:(t,e,s)=>{s.d(e,{Z:()=>n});var a=s(882);function n(t){(0,a.Z)(1,arguments);var e=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===e?new Date(t.getTime()):"number"==typeof t||"[object Number]"===e?new Date(t):("string"!=typeof t&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}},436:(t,e,s)=>{s.d(e,{Z:()=>i});var a=s(503),n=s(505);class i{static#t;static#e;static initApp(){this.#t=new n.Z("Local-ToDoList"),this.#e=a.Z.withJSONData(this.#t.getSavedData())}static updateTaskInfo(t,e,s,a,n,i){this.#e.updateTaskInfo(t,e,s,a,n,i),this.#t.saveData(this.#e.toJSONObject())}static getTask(t){return this.#e.getTask(t)}static changeTaskStatus(t){this.#e.changeTaskStatus(t),this.#t.saveData(this.#e.toJSONObject())}static deleteTask(t){this.#e.deleteTask(t),this.#t.saveData(this.#e.toJSONObject())}static getProjectByName(t){return this.#e.getProjectByName(t)}static addNewProject(t){this.#e.addNewProject(t),this.#t.saveData(this.#e.toJSONObject())}static addNewTask(t){this.#e.addNewTask(t),this.#t.saveData(this.#e.toJSONObject())}static getTasks(){return this.#e.getTasks()}static getDueTodayTasks(){return this.#e.getDueTodayTasks()}static getDueThisWeekTasks(){return this.#e.getDueThisWeekTasks()}static getTasksByProject(t){return this.#e.getTasksByProject(t)}static getProjects(){return this.#e.getProjects()}static getProjectNames(){return this.#e.getProjectNames()}static removeData(){this.#t.removeData()}static getProjectById(t){return this.#e.getProjectById(t)}}},333:(t,e,s)=>{s.d(e,{Z:()=>a});class a{static#s=0;constructor(t){this.name=t,this.id=a.#s++}deleteTask(t){this.tasks.splice(t,1)}updateTaskInfo(t,e,s,a,n){this.tasks[t].setAttributes(e,s,a,n)}toggleTaskStatus(t){this.tasks[this.getTaskIndex(t)].toggleTaskStatus()}getTask(t){let e=null;for(let s=0;s<this.tasks.length;s++)this.tasks[s].getId()==t&&(e=this.tasks[s]);return e}getTasks(){return this.tasks}setTasks(t){this.tasks=t}addTask(t){this.tasks.push(t)}getName(){return this.name}getId(){return this.id}}},505:(t,e,s)=>{s.d(e,{Z:()=>a});class a{#a;constructor(t){this.#a=t}saveData(t){localStorage.setItem(this.#a,JSON.stringify(t))}getSavedData(){let t=JSON.parse(localStorage.getItem(this.#a));return null===t&&(t={projects:[],tasks:[]}),t}removeData(){localStorage.removeItem(this.#a)}}},997:(t,e,s)=>{s.d(e,{Z:()=>a});class a{static#s=0;constructor(t,e,s,n,i){this.name=t,this.description=e,this.dueDate=s,this.priority=n,this.id=a.#s++,this.isCompleted=!1,this.project=null}setProperties(t,e,s,a,n){this.name=t,this.description=e,this.dueDate=s,this.priority=a,this.project=n}toggleTaskStatus(){this.isCompleted=!this.isCompleted}getStatus(){return this.isCompleted}getName(){return this.name}getDescription=()=>this.description;getDueDate(){return this.dueDate}getPriority(){return this.priority}getId(){return this.id}getProject(){return this.project}}},503:(t,e,s)=>{s.d(e,{Z:()=>c});var a=s(333),n=s(997),i=s(905),r=s(855),o=s(349),d=s(366),l=s(474);class c{#n;#i;constructor(){this.#n=[],this.#i=[]}static withJSONData(t){let e=new c;return e.#r(t.projects.map((t=>Object.assign(new a.Z,t)))),e.#o(t.tasks.map((t=>Object.assign(new n.Z,t)))),e}#r(t){this.#n=t}#o(t){this.#i=t}addNewProject(t){this.#n.push(t)}addNewTask(t){this.#i.push(t)}#d(t){let e=-1;for(let s=0;s<this.#i.length;s++)t==this.#i[s].getId()&&(e=s);return e}changeTaskStatus(t){let e=this.#d(t);-1!=e&&this.#i[e].toggleTaskStatus(t)}deleteTask(t){-1!=this.#d(t)&&this.#i.splice(this.#d(t),1)}updateTaskInfo(t,e,s,a,n,i){let r=this.#d(t);-1!=r&&this.#i[r].setProperties(e,s,a,n,i)}getTasks(){return this.#i}getProjects(){return this.#n}#l(t){let e=-1;for(let s=0;s<this.#n.length;s++)if(this.#n[s].getId()===t){e=s;break}return e}getProjectNames(){return this.#n.map((t=>t.getName()))}getProjectByName(t){for(let e=0;e<this.#n.length;e++)if(this.#n[e].getName()===t)return this.#n[e];return null}getProjectById(t){for(let e=0;e<this.#n.length;e++)if(this.#n[e].getId()===t)return this.#n[e];return null}getTasksByProject(t){let e=this.getProjectByName(t).getId(),s=[];for(let t=0;t<this.#i.length;t++)this.#i[t].getProject()==e&&s.push(this.#i[t]);return s}getDueTodayTasks(){let t=[];for(let e=0;e<this.#i.length;e++)(0,i.Z)((0,r.Z)(this.#i[e].getDueDate()))&&t.push(this.#i[e]);return t}getDueThisWeekTasks=()=>{let t=[],e=(0,o.Z)((0,d.Z)(),7);for(let s=0;s<this.#i.length;s++)1!=(0,l.Z)((0,r.Z)(this.#i[s].getDueDate()),e)&&t.push(this.#i[s]);return t};getTask(t){return this.#i[this.#d(t)]}toJSONObject(){return{projects:this.#n,tasks:this.#i}}}},78:(t,e,s)=>{s.d(e,{Z:()=>o});var a=s(997),n=s(333),i=s(436);const r="This field can't be empty";class o{static#c=()=>{document.querySelector("body");const t=document.querySelector(".burger-menu"),e=document.querySelector("#sidebar");let s=!1;t.addEventListener("click",(()=>{s=!s,e.classList.toggle("visible-mobile-nav"),t.classList.toggle("open")}))};static showDeleteDataModal(){document.querySelector("body").insertAdjacentHTML("beforeend",'\n        <div class="modal-wrapper">\n            <div class="delete-data-modal">\n                <div class="modal-header">\n                    <h4>Delete store data?</h4>\n                </div>\n\n                <p class="modal-text">\n                    You are about to delete all stored project and task data.\n                    <br>\n                    Are you sure you want to do this?\n                </p>\n\n                <div class="modal-footer">\n                    <button class="grey-btn bottom-modal-btn">Close</button>\n                    <button class="red-btn bottom-modal-btn">Delete data</button>\n                </div>\n            </div>\n        </div>\n        '),this.addModalEventListeners("deleteStoredData")}static showNewTaskModal=()=>{document.querySelector("body").insertAdjacentHTML("beforeend",'\n        <div class="modal-wrapper">\n            <div class="add-task-modal">\n                <div class="modal-header">\n                    <h4>New task</h4>\n                </div>\n\n                <div class="inputs">\n                    <div class="modal-left-panel">\n                        <div class="form-input">\n                            <label for="task-name-input">Title</label>\n                            <br>\n                            <input required type="text" id="task-name-input">\n                        </div>\n                        <div class="form-input">\n                            <label for="task-description-input" >Description</label>\n                            <br>\n                            <textarea id="task-description-input"></textarea>\n                        </div>\n                    </div>\n                    <div class="modal-right-panel">\n                        <div class="form-input">\n                            <label for="task-duedate-input">Due date</label>\n                            <br>\n                            <input type="date" id="task-duedate-input">\n                        </div>\n                        <div class="form-input">\n                            <label for="task-priority-input">Priority</label>\n                            <br>\n                            <select required id="task-priority-input">\n                                <option>Low</option>\n                                <option>Medium</option>\n                                <option>High</option>\n                            </select>\n                        </div>\n                        <div class="form-input">\n                            <label for="task-project-input">Project</label>\n                            <br>\n                            <select required id="task-project-input">\n                                <option>No project</option>\n                            </select>\n                        </div>\n                    </div>\n                </div>\n\n                <div class="modal-footer">\n                    <button class="grey-btn bottom-modal-btn">Close</button>\n                    <button class="blue-btn bottom-modal-btn">Add task</button>\n                </div>\n            </div>\n        </div>'),this.#u(),this.addModalEventListeners("newTask")};static showNewProjectModal=()=>{document.querySelector("body").insertAdjacentHTML("beforeend",'\n        <div class="modal-wrapper">\n            <div class="add-project-modal">\n                <div class="modal-header">\n                    <h4>New project</h4>\n                </div>\n\n                <div class="inputs">\n                    <div class="project-property">\n                        <label for="proj-name-input">Title</label>\n                        <br>\n                        <input required type="text" id="proj-name-input">\n                    </div>\n                </div>\n                \n                <div class="modal-footer">\n                    <button class="grey-btn bottom-modal-btn">Close</button>\n                    <button class="blue-btn bottom-modal-btn">Add project</button>\n                </div>\n            </div>\n        </div>'),o.addModalEventListeners("newProject")};static showEditTaskModal=t=>{const e=document.querySelector("body"),s=i.Z.getTask(t);e.insertAdjacentHTML("beforeend",`\n        <div class="modal-wrapper">\n            <div class="edit-task-modal">\n                <div class="modal-header">\n                    <h4>Edit Task</h4>\n                </div>\n\n                <div class="inputs">\n                    <div class="modal-left-panel">\n                        <div class="form-input">\n                            <label for="task-name-input">Title</label>\n                            <br>\n                            <input required type="text" id="task-name-input" value="${s.getName()}">\n                        </div>\n                        <div class="form-input">\n                            <label for="task-descritpion-input">Description</label>\n                            <br>\n                            <textarea id="task-description-input">${s.getDescription()}</textarea>\n                        </div>\n                    </div>\n                    <div class="modal-right-panel">\n                        <div class="form-input">\n                            <label for="task-duedate-input">Due date</label>\n                            <br>\n                            <input type="date" id="task-duedate-input" value="${s.getDueDate()}">\n                        </div>\n                        <div class="form-input">\n                            <label for="task-priority-input">Priority</label>\n                            <br>\n                            <select required id="task-priority-input">\n                                <option ${"Low"===s.getPriority()?'selected="selected"':""}>Low</option>\n                                <option ${"Medium"===s.getPriority()?'selected="selected"':""}>Medium</option>\n                                <option ${"High"===s.getPriority()?'selected="selected"':""}>High</option>\n                            </select>\n                        </div>\n                        <div class="form-input">\n                            <label for="task-project-input">Project</label>\n                            <br>\n                            <select required id="task-project-input">\n                                <option>No project</option>\n                            </select>\n                        </div>\n                    </div>\n                </div>\n\n                <div class="modal-footer">\n                    <button class="grey-btn bottom-modal-btn">Close</button>\n                    <button class="blue-btn bottom-modal-btn">Save</button>\n                </div>\n            </div>\n        </div>`),this.#u(),o.addModalEventListeners("editTask",t)};static showTaskInfoModal=t=>{const e=document.querySelector("body"),s=i.Z.getTask(t);e.insertAdjacentHTML("beforeend",`\n        <div class="modal-wrapper">\n            <div class="show-task-modal">\n                <div class="modal-header">\n                    <h4>${s.getName()}</h4>\n                </div>\n\n                <div class="properties">\n                    <div class="show-task-modal-left-panel">\n                        <div class="form-input">\n                            <p class="property-title">Title:</p>\n                            <p>${s.getName()}</p>\n                        </div>\n                        <div class="form-input">\n                            <p class="property-desc">Description:</p>\n                            <p>${""===s.getDescription()?"No description set":s.getDescription()}</p>\n                        </div>\n                    </div>\n                    <div class="show-task-modal-right-panel">\n                        <div class="form-input">\n                            <p class="property-due-date">Due date:</p>\n                            <p>${""===s.getDueDate()?"No due date set":s.getDueDate()}</p>\n                        </div>\n                        <div class="form-input">\n                            <p class="property-priority">Priority:</p>\n                            <p>${s.getPriority()}</p>\n                        </div>\n                        <div class="form-input">\n                            <p class="property-priority">Project:</p>\n                        <p>${null===s.getProject()?"Task not assigned to a project":i.Z.getProjectById(s.getProject()).getName()}</p>\n                    </div>\n                    </div>\n                </div>\n\n                <div class="modal-footer">\n                    <button class="grey-btn bottom-modal-btn">Close</button>\n                    <button class="blue-btn bottom-modal-btn">Edit task</button>\n                </div>\n            </div>\n        </div>`),o.addModalEventListeners("taskInfo",t)};static addNewTask=(t,e,s,a,n)=>{document.querySelector(".content").insertAdjacentHTML("beforeend",`\n        <div class="task" data-taskid ="${a}">\n                <div class="left-panel">\n                    <input type="checkbox" class="task-finished" data-taskid="${a}">\n                    <label>${t} - ${e}</label>\n                </div>\n\n                <div class="right-panel">\n                    <span class="material-icons-outlined edit-task-btn" data-taskid ="${a}">edit</span>\n                    <span class="material-icons delete-task-btn" data-taskid ="${a}">delete_outline</span>\n                    <span id="task-priority" class="material-icons task-${s.toLowerCase()}-priority">circle</span>\n                </div>\n            </div>\n        </div>`);const i=document.querySelectorAll(".task-finished");let r;for(let t=0;t<i.length;t++)if(i[t].dataset.taskid==a){r=i[t];break}if(r.addEventListener("click",(t=>{this.changeTaskStatus(a,t.target.parentNode.parentNode)})),n){const t=document.querySelectorAll(".task");let e;for(let s=0;s<t.length;s++)if(t[s].dataset.taskid==a){e=t[s];break}e.childNodes[1].classList.toggle("completedl"),e.childNodes[1].childNodes[1].checked=!0,e.childNodes[3].classList.toggle("completedr")}this.addTaskInfoEL(a),this.addEditTaskBtnEL(a),this.addDeleteTaskBtnEL(a)};static changeTaskStatus(t,e){i.Z.changeTaskStatus(t),e.childNodes[1].classList.toggle("completedl"),e.childNodes[3].classList.toggle("completedr")}static addTaskInfoEL(t){document.querySelector(`[data-taskid='${t}']`).querySelector("label").addEventListener("click",(e=>{this.showTaskInfoModal(t)}))}static addDeleteTaskBtnEL(t){const e=document.querySelectorAll(".delete-task-btn");let s;for(let a=0;a<e.length;a++)if(e[a].dataset.taskid==t){s=e[a];break}s.addEventListener("click",(t=>{this.removeTask(t.target.dataset.taskid),i.Z.deleteTask(t.target.dataset.taskid)}))}static addEditTaskBtnEL(t){const e=document.querySelectorAll(".edit-task-btn");let s;for(let a=0;a<e.length;a++)if(e[a].dataset.taskid==t){s=e[a];break}s.addEventListener("click",(t=>{this.showEditTaskModal(t.target.dataset.taskid)}))}static#p(t){const e=document.querySelector("#task-name-input").value,s=document.querySelector("#task-description-input").value,a=document.querySelector("#task-duedate-input").value,n=document.querySelector("#task-priority-input"),r=n.options[n.selectedIndex].value,o=document.querySelector("#task-project-input").value,d="No project"===o?null:i.Z.getProjectByName(o).getId();i.Z.updateTaskInfo(t,e,s,a,r,d),this.#h(t,e,a,r),this.removeModal()}static#h(t,e,s,a){const n=document.querySelector(`[data-taskid='${t}']`),i=n.querySelector("#task-priority");n.querySelector("label").innerText=`${e} - ${s}`,i.classList.remove("task-low-priority"),i.classList.remove("task-medium-priority"),i.classList.remove("task-high-priority"),i.classList.add(`task-${a.toLowerCase()}-priority`)}static addNewProject=(t,e)=>{const s=document.getElementsByClassName("project");0==s.length?document.querySelector(".projects").childNodes[1].insertAdjacentHTML("afterend",`\n            <div class="task-filter project" data-projid="${e}">\n                <span class="material-icons-outlined">description</span>\n                <p>${t}</p>\n            </div>\n            `):s[s.length-1].insertAdjacentHTML("afterend",`\n            <div class="task-filter project" data-projid="${e}">\n                <span class="material-icons-outlined">description</span>\n                <p>${t}</p>\n            </div>\n            `),o.#m()};static removeModal=()=>{const t=document.querySelector("body"),e=document.querySelector(".modal-wrapper");t.style="",e&&(e.textContent="",t.removeChild(e),o.#v())};static removeTask=t=>{const e=document.querySelector(`[data-taskid='${t}']`);document.querySelector(".content").removeChild(e)};static clearTasks=()=>{const t=document.querySelector(".content");document.querySelectorAll(".task").forEach((e=>{t.removeChild(e)}))};static removeProject=t=>{const e=document.querySelector(`[data-projid='${t}']`);document.querySelector(".projects").removeChild(e)};static clearProjects=()=>{const t=document.querySelector(".projects");document.querySelectorAll(".project").forEach((e=>{t.removeChild(e)}))};static#k=t=>{"Escape"===t.key&&o.removeModal()};static#g(){const t=document.querySelector("#proj-name-input");if(o.#y()){const e=new n.Z(t.value);i.Z.addNewProject(e),o.addNewProject(e.getName(),e.getId()),o.removeModal()}}static#b(){if(o.#f()){const t=document.querySelector("#task-name-input").value,e=document.querySelector("#task-description-input").value,s=document.querySelector("#task-duedate-input").value,n=document.querySelector("#task-priority-input"),r=n.options[n.selectedIndex].value,d=document.querySelector("#task-project-input"),l=d.options[d.selectedIndex].value,c="No project"===l?null:i.Z.getProjectByName(l).getId(),u=new a.Z(t,e,s,r,c);i.Z.addNewTask(u),o.addNewTask(u.getName(),u.getDueDate(),u.getPriority(),u.getId(),u.getStatus()),o.removeModal()}}static addModalEventListeners=(t,e=-1)=>{const s=document.querySelector("body"),a=document.querySelector(".modal-wrapper"),n=a.querySelector(".grey-btn"),i=a.querySelector(".blue-btn")||a.querySelector(".red-btn");"newTask"===t?i.addEventListener("click",this.#b):"newProject"===t?i.addEventListener("click",this.#g):"editTask"===t?i.addEventListener("click",(()=>{this.#p(e)})):"taskInfo"===t?i.addEventListener("click",(()=>{this.removeModal(),s.style="overflow-y: hidden;",this.showEditTaskModal(e)})):"deleteStoredData"===t&&i.addEventListener("click",(()=>{this.#T(),this.removeModal()})),a.addEventListener("click",(t=>{t.target.classList.contains("modal-wrapper")&&o.removeModal()})),s.addEventListener("keydown",o.#k),n.addEventListener("click",o.removeModal)};static#v=()=>{document.querySelector("body").removeEventListener("keydown",o.#k)};static#j=(t,e)=>{const s=document.querySelector("#project-name"),a=t.childNodes[3].innerText;for(let t=0;t<e.length;t++)e[t].classList.contains("selected")&&e[t].classList.remove("selected");t.classList.add("selected"),s.innerText=a,this.#N(a)};static#N=t=>{let e;e="All tasks"===t?i.Z.getTasks():"Today"===t?i.Z.getDueTodayTasks():"This week"===t?i.Z.getDueThisWeekTasks():i.Z.getTasksByProject(t),this.clearTasks(),e&&e.forEach((t=>{this.addNewTask(t.getName(),t.getDueDate(),t.getPriority(),t.getId(),t.getStatus())}))};static#m=()=>{const t=document.querySelectorAll(".task-filter");t.forEach((e=>e.addEventListener("click",(e=>{o.#j(e.currentTarget,t)}))))};static addHomepageEventListeners=()=>{const t=document.querySelector("#add-task-btn"),e=document.querySelector("#add-task-btn-alt"),s=document.querySelector(".add-project-btn"),a=document.querySelector("#delete-data-btn"),n=document.querySelector("#delete-data-btn-alt"),i=document.querySelector("body");o.#m(),s.addEventListener("click",(t=>{i.style="overflow-y: hidden;",o.showNewProjectModal()})),t.addEventListener("click",(t=>{i.style="overflow-y: hidden;",o.showNewTaskModal()})),e.addEventListener("click",(t=>{i.style="overflow-y: hidden;",o.showNewTaskModal()})),a.addEventListener("click",(t=>{i.style="overflow-y: hidden;",o.showDeleteDataModal()})),n.addEventListener("click",(t=>{i.style="overflow-y: hidden;",o.showDeleteDataModal()})),o.#c()};static#u(){const t=document.querySelector("#task-project-input");let e=i.Z.getProjectNames();for(let s=0;s<e.length;s++)t.insertAdjacentHTML("beforeend",`\n            <option>${e[s]}</option>\n            `)}static#w(t,e){const s=document.querySelector(`label[for=${t.id}]`);t.classList.add("invalid-input"),s.classList.add("red-text"),null===t.nextElementSibling&&t.insertAdjacentHTML("afterend",`<span class="invalid-input-message">${e}</span>`)}static#D(t){const e=document.querySelector(`label[for=${t.id}]`);t.classList.remove("invalid-input"),e.classList.remove("red-text"),t.nextElementSibling.remove()}static#S(t){return""===t.value?(this.#w(t,r),!1):""===t.value.trim()?(this.#w(t,"Whitespaces alone are not valid"),!1):!t.classList.contains("invalid-input")||(this.#D(t),!0)}static#L(t){return""===t.value?(this.#w(t,r),!1):!t.classList.contains("invalid-input")||(this.#D(t),!0)}static#I(t){const e=new Date,s=new Date(e.getFullYear(),e.getMonth(),e.getDate());return new Date(t.value)<s?(this.#w(t,"The due date can't be before today"),!1):!t.classList.contains("invalid-input")||(this.#D(t),!0)}static#f(){const t=document.querySelector("#task-name-input"),e=document.querySelector("#task-duedate-input"),s=document.querySelector("#task-priority-input"),a=document.querySelector("#task-project-input"),n=this.#S(t),i=""===e.value|this.#I(e),r=this.#L(s),o=this.#L(a);return n&&i&&r&&o}static#y(){const t=document.querySelector("#proj-name-input");return this.#S(t)}static#T(){i.Z.removeData(),window.location.reload()}static initHomePage(){o.addHomepageEventListeners(),i.Z.getProjects().forEach((t=>{this.addNewProject(t.getName(),t.getId())})),document.querySelector("#all-tasks").click()}}}},s={};function a(t){var n=s[t];if(void 0!==n)return n.exports;var i=s[t]={exports:{}};return e[t](i,i.exports,a),i.exports}a.d=(t,e)=>{for(var s in e)a.o(e,s)&&!a.o(t,s)&&Object.defineProperty(t,s,{enumerable:!0,get:e[s]})},a.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),t=a(78),a(436).Z.initApp(),t.Z.initHomePage()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,